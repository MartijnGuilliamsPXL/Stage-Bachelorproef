@page "/graph"

<PageTitle>Chart</PageTitle>

@using BlazorBootstrap
@using Color = System.Drawing.Color
@using System.Globalization;
@using System.Timers

<LineChart @ref="lineChart" Width="800" Class="mb-4" />

@code {
    private LineChart lineChart = default!;
    private LineChartOptions lineChartOptions = default!;
    private ChartData chartData = default!;

    private List<double> column1Data = new List<double>();
    private List<double> column2Data = new List<double>();
    private List<double> column3Data = new List<double>();

    // Timer for refreshing the graph
    Timer timer;

    protected override void OnInitialized()
    {
        // Initialize the timer
        timer = new Timer(5000); // Set the interval to 1000 milliseconds (1 second)
        timer.Elapsed += OnTimerElapsed;
        timer.AutoReset = true;
        timer.Enabled = true;

        ReadCsvFile("C:/Users/marti/Documents/GitHub/Stage-Bachelorproef/voltage-current.csv");

        var colors = ColorBuilder.CategoricalTwelveColors;

        var labels = column1Data.Select(x => x.ToString(CultureInfo.InvariantCulture)).ToList();
        var datasets = new List<IChartDataset>();

        //List<double> column2DataD = column2Data.Select(x => double.Parse(x, CultureInfo.InvariantCulture)).ToList();
        //List<double> column3DataD = column3Data.Select(x => double.Parse(x, CultureInfo.InvariantCulture)).ToList();
        Console.WriteLine(column3Data[0]);

        var dataset1 = new LineChartDataset()
            {
                Label = "Current",
                Data = column2Data,
                BackgroundColor = new List<string> { colors[0] },
                BorderColor = new List<string> { colors[0] },
                BorderWidth = new List<double> { 2 },
                HoverBorderWidth = new List<double> { 4 },
                PointBackgroundColor = new List<string> { colors[0] },
                PointRadius = new List<int> { 0 }, // hide points
                PointHoverRadius = new List<int> { 4 },
            };
        datasets.Add(dataset1);

        var dataset2 = new LineChartDataset()
            {
                Label = "Voltage",
                Data = column3Data,
                BackgroundColor = new List<string> { colors[1] },
                BorderColor = new List<string> { colors[1] },
                BorderWidth = new List<double> { 2 },
                HoverBorderWidth = new List<double> { 4 },
                PointBackgroundColor = new List<string> { colors[1] },
                PointRadius = new List<int> { 0 }, // hide points
                PointHoverRadius = new List<int> { 4 },
            };
        datasets.Add(dataset2);
        /*
        var dataset3 = new LineChartDataset()
        {
        Label = "Other",
        Data = new List<double> { 1081241, 1100363, 1118136, 1073255, 1120315, 1395736, 1488788, 1489466, 1489947, 1414739, 1735811, 1820171 },
        BackgroundColor = new List<string> { colors[2] },
        BorderColor = new List<string> { colors[2] },
        BorderWidth = new List<double> { 2 },
        HoverBorderWidth = new List<double> { 4 },
        PointBackgroundColor = new List<string> { colors[2] },
        PointRadius = new List<int> { 0 }, // hide points
        PointHoverRadius = new List<int> { 4 },
    };
    datasets.Add(dataset3);
        */
        chartData = new ChartData
            {
                Labels = labels,
                Datasets = datasets
            };

        lineChartOptions = new();
        lineChartOptions.Responsive = true;
        lineChartOptions.Interaction = new Interaction { Mode = InteractionMode.Index };

        //lineChartOptions.Scales.X.Title.Text = "2019";
        //lineChartOptions.Scales.X.Title.Display = true;

        //lineChartOptions.Scales.Y.Title.Text = "Visitors";
        //lineChartOptions.Scales.Y.Title.Display = true;

        lineChartOptions.Plugins.Title.Text = "Current/Voltage";
        lineChartOptions.Plugins.Title.Display = true;

    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await lineChart.InitializeAsync(chartData, lineChartOptions);
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    private void ReadCsvFile(string filePath)
    {
        column1Data.Clear();
        column2Data.Clear();
        column3Data.Clear();
        try
        {
            using (var streamReader = new StreamReader(filePath))
            {
                bool isFirstLine = true; // Flag to identify the first line
                double baseValue = 0;

                while (!streamReader.EndOfStream)
                {
                    var line = streamReader.ReadLine();
                    var values = line.Split(','); // Assuming CSV is comma-separated

                    if (values.Length >= 3)
                    {
                        // Adding data to respective columns
                        column1Data.Add(double.Parse(values[0], CultureInfo.InvariantCulture));
                        column2Data.Add(double.Parse(values[1], CultureInfo.InvariantCulture));
                        column3Data.Add(double.Parse(values[2], CultureInfo.InvariantCulture));

                        // If it's the first line, set the base value for subtraction
                        if (isFirstLine)
                        {
                            baseValue = column1Data[0];
                            isFirstLine = false;
                        }
                        else
                        {
                            // Subtracting the base value from the current value and updating column1Data
                            double currentValue = column1Data[column1Data.Count - 1];
                            column1Data[column1Data.Count - 1] = currentValue - baseValue;
                        }
                    }
                }
                column1Data[0] = 0;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error reading CSV file: {ex.Message}");
        }
    }

    // Method to handle timer elapsed event
    private void OnTimerElapsed(object sender, ElapsedEventArgs e)
    {
        Console.WriteLine("OK");
        Chart();
        // Invoke the state has changed to trigger UI update
        InvokeAsync(StateHasChanged);
    }

    // Define your chart data model
    private void Chart()
    {
        ReadCsvFile("C:/Users/marti/Documents/GitHub/Stage-Bachelorproef/voltage-current.csv");

        var colors = ColorBuilder.CategoricalTwelveColors;

        var labels = column1Data.Select(x => x.ToString(CultureInfo.InvariantCulture)).ToList();
        var datasets = new List<IChartDataset>();

        //List<double> column2DataD = column2Data.Select(x => double.Parse(x, CultureInfo.InvariantCulture)).ToList();
        //List<double> column3DataD = column3Data.Select(x => double.Parse(x, CultureInfo.InvariantCulture)).ToList();
        Console.WriteLine(column1Data[0]);

        var dataset1 = new LineChartDataset()
            {
                Label = "Current",
                Data = column2Data,
                BackgroundColor = new List<string> { colors[0] },
                BorderColor = new List<string> { colors[0] },
                BorderWidth = new List<double> { 2 },
                HoverBorderWidth = new List<double> { 4 },
                PointBackgroundColor = new List<string> { colors[0] },
                PointRadius = new List<int> { 0 }, // hide points
                PointHoverRadius = new List<int> { 4 },
            };
        datasets.Add(dataset1);

        var dataset2 = new LineChartDataset()
            {
                Label = "Voltage",
                Data = column3Data,
                BackgroundColor = new List<string> { colors[1] },
                BorderColor = new List<string> { colors[1] },
                BorderWidth = new List<double> { 2 },
                HoverBorderWidth = new List<double> { 4 },
                PointBackgroundColor = new List<string> { colors[1] },
                PointRadius = new List<int> { 0 }, // hide points
                PointHoverRadius = new List<int> { 4 },
            };
        datasets.Add(dataset2);
        /*
        var dataset3 = new LineChartDataset()
            {
            Label = "Other",
            Data = new List<double> { 1081241, 1100363, 1118136, 1073255, 1120315, 1395736, 1488788, 1489466, 1489947, 1414739, 1735811, 1820171 },
            BackgroundColor = new List<string> { colors[2] },
            BorderColor = new List<string> { colors[2] },
            BorderWidth = new List<double> { 2 },
            HoverBorderWidth = new List<double> { 4 },
            PointBackgroundColor = new List<string> { colors[2] },
            PointRadius = new List<int> { 0 }, // hide points
            PointHoverRadius = new List<int> { 4 },
    };
    datasets.Add(dataset3);
        */
        chartData = new ChartData
            {
                Labels = labels,
                Datasets = datasets
            };

        lineChartOptions = new();
        lineChartOptions.Responsive = true;
        lineChartOptions.Interaction = new Interaction { Mode = InteractionMode.Index };

        //lineChartOptions.Scales.X.Title.Text = "2019";
        //lineChartOptions.Scales.X.Title.Display = true;

        //lineChartOptions.Scales.Y.Title.Text = "Visitors";
        //lineChartOptions.Scales.Y.Title.Display = true;

        lineChartOptions.Plugins.Title.Text = "Current/Voltage";
        lineChartOptions.Plugins.Title.Display = true;

        Refresh();
    }

    private async Task Refresh()
    {
        await lineChart.UpdateAsync(chartData, lineChartOptions);
    }

    // Dispose method to clean up resources
    public void Dispose()
    {
        // Dispose the timer when the component is disposed
        timer?.Dispose();
    }
}