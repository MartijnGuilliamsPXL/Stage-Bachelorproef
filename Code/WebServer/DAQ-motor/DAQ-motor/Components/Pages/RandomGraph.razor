@page "/randomgraph"
@using ChartJs.Blazor.ChartJS.Common.Axes.Ticks
@using ChartJs.Blazor.ChartJS.Common.Properties
@using ChartJs.Blazor.ChartJS.LineChart
@using ChartJs.Blazor.Charts
@using ChartJs.Blazor.Util

<ChartJsLineChart @ref="_lineChartJs" Config="@_config" Width="600" Height="300" />

@code {
    private ChartJsLineChart _lineChartJs;
    private LineConfig _config;
    private LineDataset<Point> _dataset = new LineDataset<Point>
        {
            Label = "Random Data",
            BackgroundColor = ColorUtil.FromDrawingColor(System.Drawing.Color.CornflowerBlue),
            BorderColor = ColorUtil.FromDrawingColor(System.Drawing.Color.CornflowerBlue),
            Fill = false,
            PointRadius = 2.5,
            LineTension = 0.1
        };

    protected override void OnInitialized()
    {
        _config = new LineConfig
            {
                Options = new LineOptions
                {
                    Responsive = true,
                    Title = new OptionsTitle
                    {
                        Display = true,
                        Text = "Random Data Graph"
                    },
                    Scales = new Scales
                    {
                        XAxes = new List<CartesianAxis>
                    {
                        new LinearCartesianAxis
                        {
                            ScaleLabel = new ScaleLabel
                            {
                                LabelString = "Index"
                            }
                        }
                    },
                        YAxes = new List<CartesianAxis>
                    {
                        new LinearCartesianAxis
                        {
                            ScaleLabel = new ScaleLabel
                            {
                                LabelString = "Value"
                            },
                            Ticks = new LinearCartesianTicks
                            {
                                BeginAtZero = true
                            }
                        }
                    }
                    }
                }
            };

        _config.Data.Datasets.Add(_dataset);

        base.OnInitialized();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var random = new Random();
            for (var i = 0; i < 100; i++)
            {
                _dataset.Add(new Point(i, random.Next(0, 100)));
            }

            await _lineChartJs.Update();
        }
    }
}
