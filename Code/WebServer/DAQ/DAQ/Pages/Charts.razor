@page "/charts"
@using DAQ.Models;
@using PSC.Blazor.Components.Chartjs
@using PSC.Blazor.Components.Chartjs.Enums
@using PSC.Blazor.Components.Chartjs.Models
@using PSC.Blazor.Components.Chartjs.Models.Common
@using PSC.Blazor.Components.Chartjs.Models.Bar
@using PSC.Blazor.Components.Chartjs.Models.Bubble
@using PSC.Blazor.Components.Chartjs.Models.Doughnut
@using PSC.Blazor.Components.Chartjs.Models.Line
@using PSC.Blazor.Components.Chartjs.Models.Pie
@using PSC.Blazor.Components.Chartjs.Models.Polar
@using PSC.Blazor.Components.Chartjs.Models.Radar
@using PSC.Blazor.Components.Chartjs.Models.Scatter
@using System.Globalization;
@using System.IO.Ports;
@using System.Timers;
@inject DAQ.Services.BackgroundTaskService BackgroundService

<h3>Line Simple</h3>

<button @onclick="AddValue">Add value</button>
<Chart Config="_config0" @ref="Voltage" Height="400px"></Chart>
<Chart Config="_config1" @ref="Current" Height="400px"></Chart>
<button @onclick="SendData">Send Data to COM4</button>


@code {
    private List<String> time = new List<String>();
    private List<decimal?> voltage = new List<decimal?>();
    private List<decimal?> current = new List<decimal?>();
    private LineChartConfig? _config0;
    private LineChartConfig? _config1;
    private Chart? Voltage;
    private Chart? Current;
    System.Timers.Timer timer;
    public List<DataPoint> temp = new List<DataPoint>();
    //private int elapsedSeconds;



    //private int i = 0;
    public static List<string> PaletteBorder1 = new List<string>()
        {
            "rgb(255, 99, 132)",
            "rgb(255, 159, 64)",
            "rgb(255, 205, 86)",
            "rgb(75, 192, 192)",
            "rgb(54, 162, 235)",
            "rgb(153, 102, 255)",
            "rgb(201, 203, 207)"
        };
    /*
    public static List<string> SimpleLineText = new List<string>() { "0", "1", "2", "3", "4", "5", "6" };
    public static List<decimal?> SimpleLine = new List<decimal?>() { 65, 59, 80, 81, 86, 55, 40 };
    public static List<decimal?> SimpleLine2 = new List<decimal?>() { 33, 25, 35, 51, 54, 76, 60 };
    public static List<decimal?> SimpleLine3 = new List<decimal?>() { 53, 91, 39, 61, 39, 87, 23 };
    public static List<decimal?> test = new List<decimal?>() {0,100};
    */

    protected override async Task OnInitializedAsync()
    {
        //BackgroundService.UpdateChart();
        ReadCsvFile("C:/Users/marti/Documents/GitHub/Stage-Bachelorproef/Code/WebServer/DAQ/DAQ/data.csv");
        //timer = new System.Timers.Timer(1000); // Set the interval to 1000 milliseconds (1 second)
        //timer.Elapsed += OnTimerElapsed;
        //timer.AutoReset = true;
        //timer.Enabled = true;

        BackgroundService.TimerElapsed += OnTimerElapsed;


        _config0 = new LineChartConfig()
        {
            Options = new Options()
            {
                RegisterDataLabels = true,
                Plugins = new Plugins()
                {
                    DataLabels = new DataLabels()
                    {
                        Align = DatalabelsAlign.Start,
                        Anchor = DatalabelsAnchor.Start,
                    }
                }
            }
        };

        _config0.Data.Labels = time;
        _config0.Data.Datasets.Add(new LineDataset()
            {
                Label = "Voltage",
                Data = voltage,
                BorderColor = PaletteBorder1.FirstOrDefault(),
                Tension = 0.1M,
                Fill = false,
                //PointRadius= 15,
                PointStyle = PointStyle.Circle
            });

        _config1 = new LineChartConfig()
            {
                Options = new Options()
                {
                    RegisterDataLabels = true,
                    Plugins = new Plugins()
                    {
                        DataLabels = new DataLabels()
                        {
                            Align = DatalabelsAlign.Start,
                            Anchor = DatalabelsAnchor.Start,
                        }
                    }
                }
            };

        _config1.Data.Labels = time;
        _config1.Data.Datasets.Add(new LineDataset()
            {
                Label = "Current",
                Data = current,
                BorderColor = PaletteBorder1.FirstOrDefault(),
                Tension = 0.1M,
                Fill = false,
                //PointRadius= 15,
                PointStyle = PointStyle.Circle
            });

    }
    public void AddValue()
    {
        Console.WriteLine("OK OK");
        //Random rd = new Random();
        //Voltage.AddData(new List<string?>() { $"{DateTime.Now}" }, 0, new List<decimal?>() { rd.Next(0, 20) });
        //Voltage.AddData(null, 1, new List<decimal?>() { rd.Next(0, 20) });
    }

    private void ReadCsvFile(string filePath)
    {
        //column1Data.Clear();
        //column2Data.Clear();
        //column3Data.Clear();
        try
        {
            using (var streamReader = new StreamReader(filePath))
            {
                bool isFirstLine = true; // Flag to identify the first line
                double baseValue = 0;

                while (!streamReader.EndOfStream)
                {
                    var line = streamReader.ReadLine();
                    var values = line.Split(';'); // Assuming CSV is comma-separated

                    if (values.Length >= 3)
                    {
                        // Adding data to respective columns
                        time.Add(values[0]);
                        voltage.Add(decimal.Parse(values[5]));
                        current.Add(decimal.Parse(values[6]));
                    }
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error reading CSV file: {ex.Message}");
        }
    }

    private SerialPort _serialPort;

    private void SendData()
    {
        try
        {
            _serialPort = new SerialPort("COM4", 115200);
            _serialPort.Open();

            // Example: Send "Hello, World!" to COM4
            string dataToSend = "1200";
            _serialPort.Write(dataToSend);

            // Close the port when done
            _serialPort.Close();
        }
        catch (Exception ex)
        {
            // Handle exceptions (e.g., port not available, permission issues)
            Console.WriteLine($"Error: {ex.Message}");
        }
    }

    private void createCharts(LineChartConfig? config, string label, List<Decimal> data)
    {

    }

    public void UpdateChart()
    {
        Console.WriteLine("OKOKOK");
        if (temp.Count > 0)
        {
            //Console.WriteLine($"temp: {temp}");
            foreach (var point in temp)
            {
                //await writer.WriteLineAsync($"{point.Time};{point.RPM};{point.Temperature};{point.ThrustN};{point.TorqueNm};{point.VoltageV};{point.CurrentA}");
                //Random rd = new Random();
                Voltage.AddData(new List<string?>() {point.Time.ToString()}, 0, new List<decimal?>() {point.VoltageV});
                Current.AddData(new List<string?>() {point.Time.ToString()}, 0, new List<decimal?>() { point.CurrentA });
            }
            temp.Clear();
        }
    }

    private void OnTimerElapsed()
    {
        temp = BackgroundService.buffer;
        Console.WriteLine("test");
        UpdateChart();
        //UpdateChart();
        //buffer.Clear();
    }
}