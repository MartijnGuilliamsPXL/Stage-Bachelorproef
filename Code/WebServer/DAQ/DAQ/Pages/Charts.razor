@page "/charts"

@using PSC.Blazor.Components.Chartjs
@using PSC.Blazor.Components.Chartjs.Models.Line
@using PSC.Blazor.Components.Chartjs.Enums
@using PSC.Blazor.Components.Chartjs.Models
@using PSC.Blazor.Components.Chartjs.Models.Common
@using System.Globalization;
@using System.IO.Ports;
@using System.Timers;

<h3>Line Simple</h3>

@* <Chart Config="_config0" @ref="Time" Height="400px"></Chart> 
<Chart Config="_config1" @ref="Count" Height="400px"></Chart> *@
<Chart Config="_config2" @ref="Rpm" Height="400px"></Chart>
<Chart Config="_config3" @ref="Temperature" Height="400px"></Chart>
<Chart Config="_config4" @ref="Thrust" Height="400px"></Chart>
<Chart Config="_config5" @ref="Torque" Height="400px"></Chart>
<Chart Config="_config6" @ref="Voltage" Height="400px"></Chart>
<Chart Config="_config7" @ref="Current" Height="400px"></Chart>


@code {
    private List<String> time = new List<String>();
    private List<int?> count = new List<int?>();
    private List<decimal?> rpm = new List<decimal?>();
    private List<decimal?> temperature = new List<decimal?>();
    private List<decimal?> thrust = new List<decimal?>();
    private List<decimal?> torque = new List<decimal?>();
    private List<decimal?> voltage = new List<decimal?>();
    private List<decimal?> current = new List<decimal?>();

    //private LineChartConfig? _config0;
    //private LineChartConfig? _config1;
    private LineChartConfig? _config2;
    private LineChartConfig? _config3;
    private LineChartConfig? _config4;
    private LineChartConfig? _config5;
    private LineChartConfig? _config6;
    private LineChartConfig? _config7;
    //private Chart? Time;
    //private Chart? Count;
    private Chart? Rpm;
    private Chart? Temperature;
    private Chart? Thrust;
    private Chart? Torque;
    private Chart? Voltage;
    private Chart? Current;
    System.Timers.Timer timer;

    private string filePath = "C:/Users/marti/Documents/GitHub/Stage-Bachelorproef/Code/WebServer/DAQ/DAQ/data.csv";
    private long lastPosition = 0;
    private string newLines = "";

    public static List<string> PaletteBorder1 = new List<string>()
        {
            "rgb(255, 99, 132)",
            "rgb(255, 159, 64)",
            "rgb(255, 205, 86)",
            "rgb(75, 192, 192)",
            "rgb(54, 162, 235)",
            "rgb(153, 102, 255)",
            "rgb(201, 203, 207)"
        };

    protected override void OnInitialized()
    {
        var timer = new Timer(100);
        timer.Elapsed += TimerElapsed;
        timer.AutoReset = true;

        timer.Start();
        ReadCsvFile();

        //  public static LineChartConfig CreateLineChartConfig(string label, List<String> xAxis, List<decimal?> data, int min, int max, int color)
        //_config0 = LineChartHelper.CreateLineChartConfig("Time", time, time, 0, 30, 0);
        //_config1 = LineChartHelper.CreateLineChartConfig("Count", time, count, 0, 1000, 0);
        _config2 = LineChartHelper.CreateLineChartConfig("RPM", time, rpm, 0, 14000, 1);
        _config3 = LineChartHelper.CreateLineChartConfig("Temperature", time, temperature, 10, 40, 2);
        _config4 = LineChartHelper.CreateLineChartConfig("Thrust", time, thrust, 0, 3, 3);
        _config5 = LineChartHelper.CreateLineChartConfig("Torque", time, torque, 0, 3, 4);
        _config6 = LineChartHelper.CreateLineChartConfig("Voltage", time, voltage, 0, 30, 5);
        _config7 = LineChartHelper.CreateLineChartConfig("Current", time, current, 0, 16, 6);

        //await base.OnInitializedAsync();

    }

    private void ReadCsvFile()
    {
        time.Clear();
        count.Clear();
        rpm.Clear();
        temperature.Clear();
        thrust.Clear();
        torque.Clear();
        voltage.Clear();
        current.Clear();
        try
        {
            using (FileStream fs = new FileStream(filePath, FileMode.Open, FileAccess.Read, FileShare.ReadWrite))
            {
                fs.Seek(lastPosition, SeekOrigin.Begin);
                using (StreamReader sr = new StreamReader(fs))
                {
                    while (!sr.EndOfStream)
                    {
                        var line = sr.ReadLine();
                        var values = line.Split(';'); // Assuming CSV is comma-separated

                        if (values.Length >= 3)
                        {
                            // Adding data to respective columns
                            time.Add(values[0]);
                            count.Add(int.Parse(values[1]));
                            rpm.Add(decimal.Parse(values[2]));
                            temperature.Add(decimal.Parse(values[3]));
                            thrust.Add(decimal.Parse(values[4]));
                            torque.Add(decimal.Parse(values[5]));
                            voltage.Add(decimal.Parse(values[6]));
                            current.Add(decimal.Parse(values[7]));
                        }
                    }
                    lastPosition = fs.Position;
                    //Console.WriteLine($"lastPosition: {lastPosition}");
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error reading CSV file: {ex.Message}");
        }
    }



    /*
    private void createCharts(LineChartConfig? config, string label, List<Decimal> data)
    {

    }
    */

    private void UpdateChart()
    {
        try
        {
            if (Voltage != null && Current != null)
            {
                for (int i = 0; i < current.Count; i++)
                {
                    Rpm.AddData(new List<string?>() { time[i] }, 0, new List<decimal?>() { rpm[i] });
                    Temperature.AddData(new List<string?>() { time[i] }, 0, new List<decimal?>() { temperature[i] });
                    Thrust.AddData(new List<string?>() { time[i] }, 0, new List<decimal?>() { thrust[i] });
                    Torque.AddData(new List<string?>() { time[i] }, 0, new List<decimal?>() { torque[i] });
                    Voltage.AddData(new List<string?>() { time[i] }, 0, new List<decimal?>() { voltage[i] });
                    Current.AddData(new List<string?>() { time[i] }, 0, new List<decimal?>() { current[i] });
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"FAILED UpdateChart: {ex.Message}");
        }

    }

    private void TimerElapsed(object sender, ElapsedEventArgs e)
    {
        ReadCsvFile();
        UpdateChart();
    }

    public void Dispose()
    {
        timer.Dispose();
        Voltage.Dispose();
        Current.Dispose();
    }

    public class LineChartHelper
    {
        public static LineChartConfig CreateLineChartConfig(string label, List<String> xAxis, List<decimal?> data, int min, int max, int color)
        {
            var config = new LineChartConfig()
            {
                Options = new Options()
                {
                    RegisterDataLabels = true,
                    Plugins = new Plugins()
                    {
                        DataLabels = new DataLabels()
                        {
                            Align = DatalabelsAlign.Start,
                            Anchor = DatalabelsAnchor.Start,
                        }
                    },
                    Scales = new Dictionary<string, Axis>()
                    {
                        {
                            Scales.YAxisId, new Axis()
                            {
                                Min = min,
                                Max = max
                            }
                        }
                    }
                }
            };
            config.Options.Animation = false;


            config.Data.Labels = xAxis;
            config.Data.Datasets.Add(new LineDataset()
            {
                Label = label,
                Data = data,
                BorderColor = PaletteBorder1[color],
                Tension = 0,
                Fill = false,
                //PointRadius= 15,
                PointStyle = PointStyle.Circle
            });

            return config;
        }
    }

}